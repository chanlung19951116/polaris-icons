$LOAD_PATH.unshift(File.join(__dir__, "lib"))

require "fileutils"
require "bundler/gem_tasks"
require "polaris_icons"
require "open3"
require "rake/testtask"
require "json"

task :default => :spec

Rake::TestTask.new(:test) do |t|
  t.libs << "test"
  t.libs << "lib"
  t.test_files = FileList["test/**/*_test.rb"]
  t.warning = false
end

desc "Converts and copies the Polaris icons to be vendored in the Gem"
task :convert_and_copy_gem_icons do
  convert_and_copy_gem_icons
end

desc "Builds the iOS project with the Polaris Icons"
task :build_ios_project do
  convert_and_copy_gem_icons
  generate_icons_list_and_build_ios_app
end

desc "Builds the Android project with the Polaris Icons"
task :build_android_project do
  convert_and_copy_gem_icons
  copy_icons_and_build_android_app
end

def copy_icons_and_build_android_app
  puts "Building the Android app"

  images_path = File.join(__dir__, "images")
  src_path = File.join(images_path, "drawables")
  dst_path = File.join(__dir__, "projects/android/app/src/main/res/drawable")
  Dir.glob(File.join(src_path, "*.xml")).each do |drawable|
    FileUtils.copy_entry(drawable, File.join(dst_path, "polaris_icon_#{File.basename(drawable)}"))
  end

  project_path = File.join(__dir__, "projects/android")
  PolarisIcons.execute(
    File.join(project_path, "./gradlew"),
    '-p', project_path,
    'assembleDebug'
  )
end

def generate_icons_list_and_build_ios_app
  puts "Generating polaris_icons.json"
  icons_list = Dir.glob(File.join(svg_path, "*.svg"))
    .map {|p| File.basename(p).gsub(".svg", "")}
  icons_list_path = File.join(__dir__, "projects/ios/PolarisIcons/polaris_icons.json")
  File.write(icons_list_path, icons_list.to_json)

  puts "Building the iOS app"
  PolarisIcons.execute(
    "xcodebuild",
    "-project", File.join(__dir__, "projects/ios/PolarisIcons.xcodeproj"),
    "-scheme", "PolarisIcons",
    "-configuration", "Debug",
    "-sdk", "iphonesimulator",
    "-destination 'platform=iOS Simulator,name=iPhone X,OS=11.4'",
    "CODE_SIGN_IDENTITY=''", "CODE_SIGNING_REQUIRED='NO'", "CODE_SIGN_ENTITLEMENTS=''", "CODE_SIGNING_ALLOWED='NO'",
    "clean", "build"
  )

  if ci?
    puts "Exporting the app for tophat"
    app_path = Dir.glob(File.join(Dir.home, "/Library/Developer/Xcode/DerivedData/*/Build/Products/Debug-iphonesimulator/PolarisIcons.app")).first
    abort("Couldn't find the PolarisIcons app in the derived data directory") if app_path.nil?

    files = Dir.glob("**/*", base: app_path).join("\n")
    Dir.chdir(app_path) do
      FileUtils.mkdir_p("/tmp/artifacts")
      PolarisIcons.execute("zip \"/tmp/artifacts/PolarisIcons.app.zip\" -@", stdin_data: files)
    end
  end
end

def convert_and_copy_gem_icons
  # Paths
  images_path = File.join(__dir__, "images")
  svg_path = File.join(images_path, "svg")
  pdf_path = File.join(images_path, "pdf")
  xcode_path = File.join(images_path, "xcode")

  FileUtils.remove_entry(images_path) if File.directory?(images_path)
  FileUtils.mkdir_p(svg_path)
  FileUtils.mkdir_p(pdf_path)
  FileUtils.mkdir_p(xcode_path)

  # Copy
  puts "Copying monotone SVGs and generating PDFs"
  asset_catalog = PolarisIcons::AssetCatalog.new
  svg_icon_filenames = FileList
    .new(File.join(root_path, "packages/polaris-icons-raw/icons/polaris/*.svg"))
    .exclude(/_twotone.svg/)

  svg_icon_filenames.each do |path|
    # SVG
    output_svg_path = File.join(svg_path, File.basename(path))
    FileUtils.cp(path, output_svg_path)

    # PDF
    output_pdf_path = File.join(pdf_path, File.basename(path).gsub(".svg", ".pdf"))
    asset_catalog.add_pdf(output_pdf_path)
    PolarisIcons.execute(
      "rsvg-convert",
      "-f", "pdf",
      "-o", output_pdf_path,
      path
    )
  end
  puts "Generating Xcode asset catalog"
  asset_catalog.write(xcode_path)

  puts "Generating Android drawables"
  drawables_generator = PolarisIcons::DrawablesGenerator.new
  drawables_generator.generate(svg_path, drawables_path)
end

def root_path
  @root_path ||= File.expand_path("../..", __dir__)
end

def images_path
  @images_path ||= File.join(__dir__, "images")
end

def svg_path
  @svg_path ||= File.join(images_path, "svg")
end

def pdf_path
  @pdf_path ||= File.join(images_path, "pdf")
end

def xcode_path
  @xcode_path ||= File.join(images_path, "xcode")
end

def drawables_path
  @drawables_path ||= File.join(images_path, "drawables")
end

def ci?
  ["true", "1", 'YES'].include?(ENV.fetch("CI", "false"))
end
